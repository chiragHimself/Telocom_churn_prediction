# -*- coding: utf-8 -*-
"""telecom_churn_ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WU3g-5bEj0qCbw4sKoShc4fZdU-dvnVT
"""



from google.colab import drive
drive.mount('/content/drive')

from google.colab import drive

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/Datasets/Telocom_churn_prediction/Data/WA_Fn-UseC_-Telco-Customer-Churn.csv') # add path of dataset from your local environment.
df.head()
for col in df :
  print(col)
#df.sample(5)
df.drop('customerID',axis = 'columns',inplace = True)
print(df.dtypes)

df.TotalCharges.values
#pd.to_numeric(df.TotalCharges)
pd.to_numeric(df.TotalCharges,errors='coerce').isnull()
#current shape of df # 7043
df.shape
#updated our df for the null rows for total charges.
df1 = df[df.TotalCharges != ' ']
print(df1.sample(5))
df1.TotalCharges = pd.to_numeric(df1.TotalCharges)

print(df1.dtypes)

# encoding other attributes.
churn_no_tenure = df1[df1.Churn == "No" ].tenure
churn_yes_tenure = df1[df1.Churn == "Yes" ].tenure
plt.xlabel("tenure")
plt.ylabel("Number Of Customers")
plt.title("Customer Churn Prediction Visualiztion")
plt.hist([churn_no_tenure, churn_yes_tenure], rwidth=0.95, color=['green','red'],label=['Churn=no','Churn=yes'])
plt.legend()

"""clearly churn seems to decrease as the tenure increases:."""

# visulalizing similarly on monthly charges.
mc_churn_yes = df1[df1.Churn == 'Yes'].MonthlyCharges
mc_churn_no = df1[df1.Churn == 'No'].MonthlyCharges
plt.xlabel("Monthly charges")
plt.ylabel("Number Of Customers")
plt.title("Customer Churn Prediction Visualiztion")
plt.hist([mc_churn_no, mc_churn_yes], rwidth=0.95, color=['green','red'],label=['Churn=no','Churn=yes'])
plt.legend()

# printing unique values of each object column
def unique_values(df):
  for col in df:
    if df[col].dtypes == 'object':
      print(f'{col}: {df[col].unique()}')

df1.replace ('No phone service','No',inplace = True)
df1.replace ('No internet service','No',inplace = True)

print(unique_values(df1))

# encoding columns with yes and no values to 1 and 0.
yes_no_columns = ['Partner','Dependents','PhoneService','MultipleLines','OnlineSecurity','OnlineBackup',
                  'DeviceProtection','TechSupport','StreamingTV','StreamingMovies','PaperlessBilling','Churn']
for col in yes_no_columns:
    df1[col].replace({'Yes': 1,'No': 0},inplace=True)
df1.head()

# dealing with other columns
df1['gender'].replace({'Female':1,'Male':0},inplace=True)
df1.gender.unique()
# one hot encoding other categorical columns.
df2 = pd.get_dummies(data=df1, columns=['InternetService','Contract','PaymentMethod'])
df2.columns

df2.head(10)
# entire encoding is performed .

df2.dtypes
# performing scaling .
cols_to_scale = ['tenure','MonthlyCharges','TotalCharges']
import sklearn
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df2[cols_to_scale] = scaler.fit_transform(df2[cols_to_scale])
print(df2.dtypes)
print(df2.head())

# spliting the data in train test samples.
x = df2.drop('Churn',axis = 'columns')
y = df2['Churn']
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=5)
X_test

# creating the ANN
import tensorflow as tf
from tensorflow import keras
model = keras.Sequential([
    keras.layers.Dense(26, input_shape=(26,), activation='relu'),
    keras.layers.Dense(15, activation='relu'),
    keras.layers.Dense(1, activation='sigmoid')
]
)
model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['accuracy']
)
model.fit(X_train, y_train, epochs=100)

model.evaluate(X_test, y_test)
y_pred = []
yp = model.predict(X_test)
for element in yp:
    if element > 0.5:
        y_pred.append(1)
    else:
        y_pred.append(0)

y_pred[:10]

y_test[:10]
from sklearn.metrics import confusion_matrix , classification_report
print(classification_report(y_test,y_pred))
import seaborn as sn
cm = tf.math.confusion_matrix(labels=y_test,predictions=y_pred)

plt.figure(figsize = (10,7))
sn.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')

# hense therefore model achived with accuracy of around 78%
from tensorflow.keras.models import save_model

save_model(model, '/content/drive/MyDrive/Datasets/Telocom_churn_prediction/Model/telco_churn.h5') #address to location of model to be saved.